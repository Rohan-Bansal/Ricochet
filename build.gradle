
plugins {
    id 'java'
    id 'io.codearte.nexus-staging' version '0.11.0'
}

group 'me.rohanbansal'
version '1.5'

group = "me.rohanbansal.ricochet"
archivesBaseName = "ricochet"
version = "1.5-SNAPSHOT"

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    jcenter()
    google()
}

apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task testJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Ricochet',
                'Implementation-Version': version,
                'Main-Class': ''
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

nexusStaging {
    packageGroup = "me.rohanbansal.ricochet" //optional if packageGroup == project.getGroup()
    stagingProfileId = "501b26d7b050" //when not defined will be got from server using "packageGroup"
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Ricochet'
                packaging 'jar'
                // optionally artifactId can be defined here
                description '2D Engine designed for LibGDX'
                url 'http://www.example.com/example-application'

                scm {
                    connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
                    developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
                    url 'http://foo.googlecode.com/svn/trunk/'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'firefall'
                        name 'Rohan Bansal'
                        email 'bansalrohan18@gmail.com'
                    }
                }
            }
        }
    }
}

ext {
    gdxVersion = '1.9.10'
    box2DLightsVersion = '1.4'

}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
}
